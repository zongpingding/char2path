% \iffalse meta-comment
%
% File: char2path.dtx
% -----------------------------------------------------------------------
%   Copyright (C) 2025 by Zongping Ding <zongpingding5@outlook.com> and *
%                         Mingyu Xia    <myhsia@outlook.com>            *
%                                                                       *
%   This work may be distributed and/or modified under the conditions   *
%   of the LaTeX Project Public License (LPPL), either version 1.3c of  *
%   this license or (at your option) any later version.                 *
%   The latest version of this license is in                            *
%                                                                       *
%       http://www.latex-project.org/lppl.txt                           *
%                                                                       *
%   and version 1.3c or later is part of all distributions of LaTeX     *
%   version 2008 or later.                                              *
%                                                                       *
%   This work has the LPPL maintenance status `maintained'.             *
%                                                                       *
%   The Current Maintainer of this work is Zongping Ding and Mingyu Xia.*
%                                                                       *
%   This work consists of the files char2path.dtx,                      *
%                                   ctp-data.dtx,                       *
%                                   char2path.ins,                      *
%                 the derived files char2path.sty,                      *
%                                   ctp-lmr-arabic.data.tex,            *
%                                   ctp-lmr-alpha-small.data.tex,       *
%                                   ctp-lmr-alpha-caps.data.tex,        *
%                                   ctp-lmr-others.data.tex,            *
%                                   ctp-lms-arabic.data.tex,            *
%                                   ctp-lms-alpha-small.data.tex,       *
%                                   ctp-lms-alpha-caps.data.tex,        *
%                                   ctp-lms-others.data.tex,            *
%                                   ctp-lmm-arabic.data.tex,            *
%                                   ctp-lmm-alpha-small.data.tex,       *
%                                   ctp-lmm-alpha-caps.data.tex,        *
%                                   ctp-lmm-others.data.tex,            *
%                                   ctp-adventor-arabic.data.tex,       *
%                                   ctp-adventor-alpha-small.data.tex,  *
%                                   ctp-adventor-alpha-caps.data.tex,   *
%                                   ctp-adventor-others.data.tex,       *
%                                   ctp-bonum-arabic.data.tex,          *
%                                   ctp-bonum-alpha-small.data.tex,     *
%                                   ctp-bonum-alpha-caps.data.tex,      *
%                                   ctp-bonum-others.data.tex,          *
%                                   ctp-chorus-arabic.data.tex,         *
%                                   ctp-chorus-alpha-small.data.tex,    *
%                                   ctp-chorus-alpha-caps.data.tex,     *
%                                   ctp-chorus-others.data.tex,         *
%                                   ctp-cursor-arabic.data.tex,         *
%                                   ctp-cursor-alpha-small.data.tex,    *
%                                   ctp-cursor-alpha-caps.data.tex,     *
%                                   ctp-cursor-others.data.tex,         *
%                                   ctp-heros-arabic.data.tex,          *
%                                   ctp-heros-alpha-small.data.tex,     *
%                                   ctp-heros-alpha-caps.data.tex,      *
%                                   ctp-heros-others.data.tex,          *
%                                   ctp-pagella-arabic.data.tex,        *
%                                   ctp-pagella-alpha-small.data.tex,   *
%                                   ctp-pagella-alpha-caps.data.tex,    *
%                                   ctp-pagella-others.data.tex,        *
%                                   ctp-schola-arabic.data.tex,         *
%                                   ctp-schola-alpha-small.data.tex,    *
%                                   ctp-schola-alpha-caps.data.tex,     *
%                                   ctp-schola-others.data.tex,         *
%                                   ctp-termes-arabic.data.tex,         *
%                                   ctp-termes-alpha-small.data.tex,    *
%                                   ctp-termes-alpha-caps.data.tex,     *
%                                   ctp-termes-others.data.tex,         *
%           the documentation files char2path.pdf,                      *
%                               and README.md.                          *
% -----------------------------------------------------------------------
%
%   Any modification of this file should ensure that the copyright and
%   license information is placed in the derived files.
%
% -----------------------------------------------------------------------
%
%<*internal>
\iffalse
%</internal>
%
%<*readme>
[![CTAN Version](https://img.shields.io/ctan/v/char2path)](https://ctan.org/pkg/char2path)
[![GitHub Release](https://img.shields.io/github/v/release/zongpingding/char2path)](https://github.com/zongpingding/char2path/releases/latest)
[![GitHub Last Commit](https://img.shields.io/github/last-commit/zongpingding/char2path)](https://github.com/zongpingding/char2path/commits)
[![Actions Status](https://github.com/zongpingding/char2path/actions/workflows/main.yaml/badge.svg?branch=main)](https://github.com/zongpingding/char2path/actions)
[![GitHub Repo stars](https://img.shields.io/github/stars/zongpingding/char2path)](https://github.com/zongpingding/char2path)

The `char2path` Package
=======================

The `char2path` package provides a LaTeX package for converting characters into Ti*k*Z paths.

Overview
--------

The package provides the `\chartopath` and `\chartoclip` macro

    \chartopath [<keys>] {<font>} {<string>}
    \chartoclip [<keys>] {<font>} {<character>}

to print Ti*k*Z paths for characters in a string.

See `char2path.pdf` for more. Happy TeXing!

Generate Ti*k*Z paths from font
-------------------------------
First, install the dependencies. For Windows users:
```shell
cd resources/scripts
pip install -r requirements.txt
```

for Linux users:
```python
cd resources/scripts
pip3 install -r requirements.txt
```

on macOS, run the following command:
```shell
cd resources/scripts
brew install cairo pkg-config
python3 -m pip install -r requirements.txt --break-system-packages
```

Next, custom your own `config.toml`, An example configuration is:
```toml
[flow]
method = "font2svg"
gensvg = true
extsvg = true
gentkz = true

[font_spec]
folder = "../Fonts/"
name   = "texgyreadventor-regular.otf"
alias  = 'texgyre'

[svg_dir]
folder = "SVGs"
sub_1  = "."
sub_2  = "_moreSVGs_"
caps   = "caps"
small  = "small"
nums   = "nums"
others = "others"

[tkz_data]
folder = "../data"
caps   = "ctp-%ALIAS%-alpha-caps.data.tex"
small  = "ctp-%ALIAS%-alpha-small.data.tex"
nums   = "ctp-%ALIAS%-arabic.data.tex"
others = "ctp-%ALIAS%-others.data.tex"
digits = 3
# coor_x = "+\\ctpXshift"
# coor_y = "+\\ctpYshift"
```

Command-line arguments take precedence over the TOML file.
``` txt
usage: font2path [options]

font2path: a tool that converts font into TikZ paths.

options:
  -h, --help           show this help message and exit
  -m, --method         tikz path generating method.
  -s, --string         the string for conversion('fonttools' only).
  -p, --folder         font folder.
  -d, --data           tikz path data folder.
  -a, --alias          font name alias.
  -g, --gensvg (Bool)  'True' to generate SVGs from font.
  -e, --extsvg (Bool)  'True' to extract SVGs from previous run.
  -c, --gentkz (Bool)  'True' to generate tikz path from previous run.
  -q, --quiet (Bool)   'True' to suppress message.
  -f, --font           font name('*.ttf' or '*.otf').
```

Finally, run the command below:
``` shell
python font2path.py
```

Issues
------

The issue tracker for `char2path` is currently located
[on GitHub](https://github.com/zongpingding/char2path/issues).

Build status
------------

This project uses [GitHub Actions](https://github.com/features/actions)
as a hosted continuous integration service. For each commit, the build status
is tested using the current release of TeX Live.

_Current build status:_ ![build status](https://github.com/zongpingding/char2path/actions/workflows/main.yaml/badge.svg?branch=main)

References
----------

\[1\] https://www.gust.org.pl/projects/e-foundry/latin-modern/download

\[2\] https://www.unicode.org/standard/standard.html

Copyright and License
---------------------

Copyright (C) 2025 by Zongping Ding <[zongpingding5@outlook.com](mailto:zongpingding5@outlook.com)> and
Mingyu Xia <[myhsia@outlook.com](mailto:myhsia@outlook.com)>

---

This package's `lm' data is converted from the
[Latin Modern family](https://www.gust.org.pl/projects/e-foundry/latin-modern),
based on the Computer Modern fonts, which are released into public
domain by AMS (1997). It's licensed under
**[The GUS Font License (GFL)](https://ctan.org/license/gfl)**.

This package's `tg' data is converted from the
[TeX Gyre fonts](https://ctan.org/pkg/tex-gyre),
which are being released under
**[The GUS Font License (GFL)](https://ctan.org/license/gfl)**.

---

This work may be distributed and/or modified under the conditions
of the LaTeX Project Public License (LPPL), either version 1.3c of
this license or (at your option) any later version.
The latest version of this license is in

    http://www.latex-project.org/lppl.txt

and version 1.3c or later is part of all distributions of LaTeX
version 2008 or later.

This work has the LPPL maintenance status `maintained'.

The Current Maintainer of this work is **Zongping Ding** and **Mingyu Xia**.
%</readme>
%
%<*eg-preamble>
%% \iffalse
\documentclass{article}
\def\MakePercentIgnore{\catcode`\%9\relax}
\def\MakePercentComment{\catcode`\%14\relax}
\def\DocInput#1{\MakePercentIgnore\input{#1}\MakePercentComment}
\catcode`\^^A 14\relax
\usepackage[scale = 10pt]{char2path}
\usepackage[T1]{fontenc}
\setCTPfamilyfont {sans}  {adventor}
\setCTPfamilyfont {serif} {bonum}
\setCTPfamilyfont {serif} {chorus}
\setCTPfamilyfont {mono}  {cursor}
\setCTPfamilyfont {sans}  {heros}
\setCTPfamilyfont {serif} {pagella}
\setCTPfamilyfont {serif} {schola}
\setCTPfamilyfont {serif} {termes}
\usepackage{geometry, verbatim, listings}
\geometry{margin = .5in}
\lstset{basicstyle = \footnotesize\ttfamily, numbers = left}
\newenvironment{example}{\vskip1ex\hrule\vskip1ex}{\vskip1ex\hrule\vskip1ex\par}
\begin{document}
  \pagestyle{empty}
  \DocInput{\jobname.tex}
\end{document}
%% \fi
%</eg-preamble>
%
%<*internal>
\fi
%</internal>
%
%<*driver>
\documentclass[show-notes]{l3doc}
\usepackage[scale = 10pt]{char2path}
\setCTPfamilyfont {sans}  {adventor}
\setCTPfamilyfont {serif} {bonum}
\setCTPfamilyfont {serif} {chorus}
\setCTPfamilyfont {mono}  {cursor}
\setCTPfamilyfont {sans}  {heros}
\setCTPfamilyfont {serif} {pagella}
\setCTPfamilyfont {serif} {schola}
\setCTPfamilyfont {serif} {termes}
\usepackage{listings, pdfpages, microtype}
\DisableLigatures[-]{encoding = T1, family = tt*}
\lstset{basicstyle = \footnotesize\ttfamily, numbers = left}
\AddToHook{env/function/before}{\vspace*{-.5\baselineskip}}
\ExplSyntaxOn \makeatletter
\DeclareDocumentCommand \key { s m }
  {
    \IfBooleanTF {#1} { \textcolor{red}{\bfseries #2} }
      {
        \ttfamily
        \seq_set_from_clist:Nn \l_tmpa_seq {#2}
        \seq_set_map:NNn \l_tmpb_seq \l_tmpa_seq
          { \exp_not:n { \textcolor{red}{\bfseries ##1} } }
        \seq_use:Nn \l_tmpb_seq { ,~ } \:=\:
      }
  }
\DeclareCommandCopy \val \meta
\def \TFF {true\textup{\textbar\underline{\textbf{false}}}}
\def \TTF {\textup{\underline{\textbf{true}}\textbar}false}
\def \HoLogo@ApLaTeX #1{^^A
  \HOLOGO@mbox {A\kern -.05em p\kern -.05em \hologo{LaTeX}}}
\newcounter{example}[subsection]
\renewcommand\theexample{\thesubsection.\arabic{example}}
\newwrite\example@out
\def\example@name{\jobname.example.aux}
\long\def\example@start{\begingroup\@bsphack
  \immediate\openout\example@out=\example@name
  \let\do\@makeother\dospecials\catcode`\^^M\active
  \def\verbatim@processline{\immediate\write\example@out{\the\verbatim@line}}^^A
  \verbatim@start}
\long\def\example@end{\immediate\closeout\example@out\@esphack\endgroup
  \trivlist\item\relax
    \leavevmode\hbox to \z@{^^A
      \hbox to \z@{\hss{\footnotesize[\theexample]}\hskip4pt}
      \begin{minipage}[c]{.75\textwidth}^^A
        \small\verbatiminput \example@name
      \end{minipage}^^A
      \fbox{^^A
        \begin{minipage}[c]{.21\textwidth}^^A
          \normalsize\input \example@name
        \end{minipage}^^A
      }^^A
    \hss}^^A
  \endtrivlist}
\long\def\s@example@end{\immediate\closeout\example@out\@esphack\endgroup
  \trivlist\item\relax
    \leavevmode\hbox to \z@{^^A
      \hbox to \z@{\hss{\footnotesize[\theexample]}\hskip4pt}\vbox{\noindent
      \hskip-4pt
      \begin{minipage}{\textwidth}^^A
        \small\VerbatimInput[gobble=2]{\example@name}^^A
      \end{minipage}\par\smallskip\noindent
      \fbox{^^A
        \begin{minipage}{\textwidth}^^A
          \normalsize\input \example@name^^A
        \end{minipage}^^A
      }}^^A
    \hss}^^A
  \endtrivlist}
\newenvironment{example}
  {\stepcounter{example}\example@start}{\example@end}
\newenvironment{example*}
  {\stepcounter{example}\example@start}{\s@example@end}
\makeatother \ExplSyntaxOff
\newlist{keyval}{itemize}{10}
\setlist[keyval]{leftmargin = 0pt, labelsep = 0pt}
\makeindex
\begin{document}
  \DocInput{\jobname.dtx}
\end{document}
%</driver>
% \fi
% \title{^^A
%   The \texorpdfstring{^^A
%     \chartopath[hfading = {teal, purple}]{lms}{char2path}^^A
%   }{char2path} Package\thanks{^^A
%     \url{https://ctan.org/pkg/char2path},
%     \url{https://github.com/zongpingding/char2path}^^A
%   }^^A
% }
% \author{^^A
%   Zongping Ding\thanks{^^A
%     \href{mailto:zongpingding5@outlook.com}{\texttt{zongpingding5@outlook.com}}},~
%   Mingyu Xia\thanks{^^A
%     \href{mailto:xiamingyu@westlake.edu.cn}{\texttt{xiamingyu@westlake.edu.cn}}^^A
%   }^^A
% }
% \date{Released 2025-08-09\quad \texttt{v1.0.1}}
% \def\Copyright{^^A
% \begin{center}
% \fbox{\fbox{\begin{tabular}{@{}>{\small}{l}@{}}^^A
% This package's `lm' data is converted from the
% \href{https://www.gust.org.pl/projects/e-foundry/latin-modern}{Latin Modern family}, based\\^^A
% on the Computer Modern fonts, which are released into public domain by\\^^A
% AMS (1997). It's licensed under
% \href{https://ctan.org/license/gfl}{The GUS Font License (GFL)}.\\^^A
% This package's `tg' data is converted from the
% \href{https://ctan.org/pkg/tex-gyre}{TeX Gyre fonts}, which are\\^^A
% being released under
% \href{https://ctan.org/license/gfl}{The GUS Font License (GFL)}.
% \end{tabular}}}\end{center}}
% \makeatletter \def\@thanks{\Copyright} \makeatother
%
% \maketitle
%
% \begin{documentation}
%
% \section{Introduction}\label{sec:introduction}
%
% The \pkg{char2path} package provides a \LaTeX\ package for converting
% characters into Ti\textit k\/Z paths.
% It supports compilation methods including \hologo{pdfLaTeX},
% \hologo{XeLaTeX}, and \hologo{LuaLaTeX}.
% \DeleteShortVerb\| \DeleteShortVerb\"
% \iffalse
%<*example>
\begin{center}
\raggedright\vbox{^^A
  \begin{minipage}{.96\linewidth}
    \chartopath[mono = .032\linewidth, draw]{lmr}{!\#$"\%&'()*+,-./0123456789:;<=>?@}
    \chartopath[mono = .032\linewidth, draw]{lmr}{ABCDEFGHIJKLMNOPQRSTUVWXYZ[\ctpbackslash]^_`}
    \chartopath[mono = .032\linewidth, draw]{lmr}{abcdefghijklmnopqrstuvwxyz\{|\}~}
  \end{minipage}
  \hspace*\fill
  \begin{minipage}{.02\linewidth}
    \centering
    \rotatebox{90}{\textrm{LMR}}
  \end{minipage}
  \vskip1ex\hrule \vskip1ex
  \begin{minipage}{.96\linewidth}
    \chartopath[mono = .032\linewidth, draw]{lms}{!\#$"\%&'()*+,-./0123456789:;<=>?@}
    \chartopath[mono = .032\linewidth, draw]{lms}{ABCDEFGHIJKLMNOPQRSTUVWXYZ[\ctpbackslash]^_`}
    \chartopath[mono = .032\linewidth, draw]{lms}{abcdefghijklmnopqrstuvwxyz\{|\}~}
  \end{minipage}
  \hspace*\fill
  \begin{minipage}{.02\linewidth}
    \centering
    \rotatebox{90}{\textsf{LMS}}
  \end{minipage}
  \vskip1ex\hrule \vskip1ex
  \begin{minipage}{.96\linewidth}
    \chartopath[mono = .032\linewidth, draw]{lmm}{!\#$"\%&'()*+,-./0123456789:;<=>?@}
    \chartopath[mono = .032\linewidth, draw]{lmm}{ABCDEFGHIJKLMNOPQRSTUVWXYZ[\ctpbackslash]^_`}
    \chartopath[mono = .032\linewidth, draw]{lmm}{abcdefghijklmnopqrstuvwxyz\{|\}~}
  \end{minipage}
  \hspace*\fill
  \begin{minipage}{.02\linewidth}
    \centering
    \rotatebox{90}{\texttt{LMM}}
  \end{minipage}
  \vskip1ex\hrule \vskip1ex
  \begin{minipage}{.96\linewidth}
    \chartopath[mono = .032\linewidth, draw]{adventor}{!\#$"\%&'()*+,-./0123456789:;<=>?@}
    \chartopath[mono = .032\linewidth, draw]{adventor}{ABCDEFGHIJKLMNOPQRSTUVWXYZ[\ctpbackslash]^_`}
    \chartopath[mono = .032\linewidth, draw]{adventor}{abcdefghijklmnopqrstuvwxyz\{|\}~}
  \end{minipage}
  \hspace*\fill
  \begin{minipage}{.02\linewidth}
    \centering
    \rotatebox{90}{\footnotesize\fontfamily{qag}\selectfont Adventor}
  \end{minipage}
  \vskip1ex\hrule \vskip1ex
  \begin{minipage}{.96\linewidth}
    \chartopath[mono = .032\linewidth, draw]{bonum}{!\#$"\%&'()*+,-./0123456789:;<=>?@}
    \chartopath[mono = .032\linewidth, draw]{bonum}{ABCDEFGHIJKLMNOPQRSTUVWXYZ[\ctpbackslash]^_`}
    \chartopath[mono = .032\linewidth, draw]{bonum}{abcdefghijklmnopqrstuvwxyz\{|\}~}
  \end{minipage}
  \hspace*\fill
  \begin{minipage}{.02\linewidth}
    \centering
    \rotatebox{90}{\footnotesize\fontfamily{qbk}\selectfont Bonum}
  \end{minipage}
  \vskip1ex\hrule \vskip1ex
  \begin{minipage}{.96\linewidth}
    \chartopath[mono = .032\linewidth, draw]{chorus}{!\#$"\%&'()*+,-./0123456789:;<=>?@}
    \chartopath[mono = .032\linewidth, draw]{chorus}{ABCDEFGHIJKLMNOPQRSTUVWXYZ[\ctpbackslash]^_`}
    \chartopath[mono = .032\linewidth, draw]{chorus}{abcdefghijklmnopqrstuvwxyz\{|\}~}
  \end{minipage}
  \hspace*\fill
  \begin{minipage}{.02\linewidth}
    \centering
    \rotatebox{90}{\footnotesize\fontfamily{qzc}\selectfont Chorus}
  \end{minipage}
  \vskip1ex\hrule \vskip1ex
  \begin{minipage}{.96\linewidth}
    \chartopath[mono = .032\linewidth, draw]{cursor}{!\#$"\%&'()*+,-./0123456789:;<=>?@}
    \chartopath[mono = .032\linewidth, draw]{cursor}{ABCDEFGHIJKLMNOPQRSTUVWXYZ[\ctpbackslash]^_`}
    \chartopath[mono = .032\linewidth, draw]{cursor}{abcdefghijklmnopqrstuvwxyz\{|\}~}
  \end{minipage}
  \hspace*\fill
  \begin{minipage}{.02\linewidth}
    \centering
    \rotatebox{90}{\footnotesize\fontfamily{qcr}\selectfont Cursor}
  \end{minipage}
  \vskip1ex\hrule \vskip1ex
  \begin{minipage}{.96\linewidth}
    \chartopath[mono = .032\linewidth, draw]{heros}{!\#$"\%&'()*+,-./0123456789:;<=>?@}
    \chartopath[mono = .032\linewidth, draw]{heros}{ABCDEFGHIJKLMNOPQRSTUVWXYZ[\ctpbackslash]^_`}
    \chartopath[mono = .032\linewidth, draw]{heros}{abcdefghijklmnopqrstuvwxyz\{|\}~}
  \end{minipage}
  \hspace*\fill
  \begin{minipage}{.02\linewidth}
    \centering
    \rotatebox{90}{\footnotesize\fontfamily{qhv}\selectfont Heros}
  \end{minipage}
  \vskip1ex\hrule \vskip1ex
  \begin{minipage}{.96\linewidth}
    \chartopath[mono = .032\linewidth, draw]{pagella}{!\#$"\%&'()*+,-./0123456789:;<=>?@}
    \chartopath[mono = .032\linewidth, draw]{pagella}{ABCDEFGHIJKLMNOPQRSTUVWXYZ[\ctpbackslash]^_`}
    \chartopath[mono = .032\linewidth, draw]{pagella}{abcdefghijklmnopqrstuvwxyz\{|\}~}
  \end{minipage}
  \hspace*\fill
  \begin{minipage}{.02\linewidth}
    \centering
    \rotatebox{90}{\footnotesize\fontfamily{qpl}\selectfont Pagella}
  \end{minipage}
  \vskip1ex\hrule \vskip1ex
  \begin{minipage}{.96\linewidth}
    \chartopath[mono = .032\linewidth, draw]{schola}{!\#$"\%&'()*+,-./0123456789:;<=>?@}
    \chartopath[mono = .032\linewidth, draw]{schola}{ABCDEFGHIJKLMNOPQRSTUVWXYZ[\ctpbackslash]^_`}
    \chartopath[mono = .032\linewidth, draw]{schola}{abcdefghijklmnopqrstuvwxyz\{|\}~}
  \end{minipage}
  \hspace*\fill
  \begin{minipage}{.02\linewidth}
    \centering
    \rotatebox{90}{\footnotesize\fontfamily{qcs}\selectfont Schola}
  \end{minipage}
  \vskip1ex\hrule \vskip1ex
  \begin{minipage}{.96\linewidth}
    \chartopath[mono = .032\linewidth, draw]{termes}{!\#$"\%&'()*+,-./0123456789:;<=>?@}
    \chartopath[mono = .032\linewidth, draw]{termes}{ABCDEFGHIJKLMNOPQRSTUVWXYZ[\ctpbackslash]^_`}
    \chartopath[mono = .032\linewidth, draw]{termes}{abcdefghijklmnopqrstuvwxyz\{|\}~}
  \end{minipage}
  \hspace*\fill
  \begin{minipage}{.02\linewidth}
    \centering
    \rotatebox{90}{\footnotesize\fontfamily{qtm}\selectfont Termes}
  \end{minipage}
}
\end{center}
%</example>
% \fi
% \MakeShortVerb\| \MakeShortVerb\"
%
% \section{Getting Started}
%
% \noindent
% \begin{minipage}{.55\linewidth}
%   To load this package, write the line
%   \begin{Verbatim}[commandchars = \|\{\}]
% \usepackage[scale = |meta{choice}]|{char2path|}
%   \end{Verbatim}
%   The supported right listed \meta{choice} can
%   scale the converted paths with corresponding factors.
% \end{minipage}
% \hspace*\fill
% \begin{minipage}{.43\linewidth}
%   \begin{tabular}{*5{>{\small}c}}
%     \toprule
%     Choice  & |10pt| & |11pt| & |12pt| & |13pt|\\
%     Factor  & |0.82| & |0.90| & |0.98| & |1.07|\\
%     \midrule
%     Choice  & |14pt| & |15pt| & |16pt| & ...   \\
%     Factor  & |1.15| & |1.23| & |1.31| & ...   \\
%     \bottomrule
%   \end{tabular}
% \end{minipage}
% \par \medskip \noindent
% \DescribeMacro{\ctpbackslash}
% The characters listed in Section~\ref{sec:introduction}
% are supported by this package within
% \textrm{Latin Modern Roman},
% \textsf{Latin Modern Sans}, and \texttt{Latin Modern Mono} fonts.
% Inputting some characters needs to be escaped.
% Using the \texttt{Latin Modern Mono} font as an example:
% \begin{Verbatim}[gobble = 4]
%   \chartopath{lmm}{!\#$"\%&'()*+,-./0123456789:;<=>?@}
%   \chartopath{lmm}{ABCDEFGHIJKLMNOPQRSTUVWXYZ[\ctpbackslash]^_`}
%   \chartopath{lmm}{abcdefghijklmnopqrstuvwxyz\{|\}~}
% \end{Verbatim}
%
% \section{Font Setup}
%
% \begin{function}[added = 2025-07-31]{\setCTPfamilyfont}
%   \begin{syntax}
%     \cs{setCTPfamilyfont} \marg{font style} \marg{font family} \oarg{database}
%   \end{syntax}
%   This function enables users to load custom font by generating path data
%   files^^A
%   \NB{Note}{Compiling option |-shell -escape| is required.}
%   \file{ctp-}\meta{font family}\file{-}\meta{database}\file{.code.tex}.
%   The \meta{font style} will determine if the font needs to be monospace.
%   This package has already loaded the following fonts:
%   \begin{Verbatim}[gobble = 4]
%     \setCTPfamilyfont {serif} {lmr}
%     \setCTPfamilyfont {sans}  {lms}
%     \setCTPfamilyfont {mono}  {lmm}
%   \end{Verbatim}
% \end{function}
% 
% \section{Basic Usage}
%
% \begin{function}[updated = 2025-08-01]{\chartopath}
%   \begin{syntax}
%     \cs{chartopath} \oarg{key-vals} \marg{font family} \marg{string}
%   \end{syntax}
%   The \oarg{key-vals} accepts the listed keys to set how the \meta{string}
%   converts to path.
%   \begin{keyval}
%     \item [\key{font}] \val{lmr\textup\textbar lms\textup\textbar lmm}
%     choose char's font.
%     \item [\key{draw, fill}] \val{color} set the color of
%     the outline/fill of string (Default: |black|).
%     \item [\key{outline}] \val{dim} set the outline of the string
%     to achieve the ``Fake Bold'' effect (Default: |0pt|).
%     \item [\key{scale}] \val{fp num} set font's scale factor
%     (Default: |1|).
%     \item [\key{mono}] \val{dim} set font's monospace width
%     (Default: |0pt|, monospace width is disabled now).
%     \item [\key{hfading, vfading}] \val{color clist} set the two colors
%     for horizontally/vertically fading the whole string.
%     \item [\key{rescan}] \val{\TTF} rescan tokens |$|, |&|, and |~|
%     with catcode 12 (other).
%   \end{keyval}
% \end{function}
%
% \begin{function}[updated = 2025-08-01]{\chartoclip}
%   \begin{syntax}
%     \cs{chartoclip} \oarg{key-vals} \marg{font family} \marg{char}
%   \end{syntax}
%   The mandatory argument accepts a single character, and the optional
%   argument accepts the following keys to set the style how the character clip
%   the image.
%   \begin{keyval}
%     \item [\key{font}] \val{lmr\textup\textbar lms\textup\textbar lmm}
%     choose char's font.
%     \item [\key{image}] \val{image file} set image for clipping.
%     \item [\key{scale}] \val{fp num} set font's scale factor (Default: |1|).
%     \item [\key{anchor}] \val{tikz anchor} set image's anchor.
%     \item [\key{offset}] \val{(x, y)} set imgae anchor's offset.
%     \item [\key{height}] \val{dim} image's height.
%   \end{keyval}
% \end{function}
%
% \section{Advanced}
%
% \begin{function}[added = 2025-07-28]{\ctpdata}
%   \begin{syntax}
%     \cs{ctpdata} \marg{font family} \marg{character}
%   \end{syntax}
%   This function can output the path data (in \textsc{pgf} coordinates).
%   \NB{Note}{This command is expandable.}
% \begin{example*}
%   \def\0{\ctpdata{lmr}{-}} \small\ttfamily\detokenize\expandafter{\expanded{\0}}
% \end{example*}
% \end{function}
%
% \section{Examples}
%
% \subsection{Outline, Fill and Scale}
%
% \noindent
% \iffalse
%<*example>
% \fi
\def\0{char2path}
% \iffalse
%</example>
% \fi
% If none of the \oarg{keys} in the optional argument of \cs{chartopath}
% is assigned, then only the outline of the inputted string will be printed.
% \iffalse
%<*example>
% \fi
\begin{example}
  \def\0{char2path} \chartopath{lmm}\0
\end{example}
% \iffalse
%</example>
% \fi
% Commands like \cs[no-index]{small} can be directly applied to \cs{chartopath}.
% A comparison of the text and the converted path under 4 different font size
% is shown in the following figure.
% \begin{center}
%   \begin{tikzpicture}[every node/.style = {font = \ttfamily}]
%     \draw [ -stealth, gray!25, line width = 1em, line cap = round ]
%       (0,0) --++ (.93\linewidth,0) node [ left, black ] {\tn{f@size}};
%     \node [ above = 1ex ] at (.06\linewidth,0) {\small      \0};
%     \node [ above = 1ex ] at (.24\linewidth,0) {\normalsize \0};
%     \node [ above = 1ex ] at (.45\linewidth,0) {\large      \0};
%     \node [ above = 1ex ] at (.72\linewidth,0) {\Large      \0};
%     \node [ below = 1ex ] at (.06\linewidth,0)
%       {\small     \chartopath[fill = orange]{lmm}\0};
%     \node [ below  = 1ex] at (.24\linewidth,0)
%       {\normalsize\chartopath[fill = green]{lmm}\0};
%     \node [ below = 1ex ] at (.45\linewidth,0)
%       {\large     \chartopath[fill = blue]{lmm}\0};
%     \node [ below = 1ex ] at (.72\linewidth,0)
%       {\Large     \chartopath[fill = purple]{lmm}\0};
%     \makeatletter
%     \node at (.06\linewidth,0)
%       {\small     \scalebox{\fpeval{8/\f@size}}
%         {\small     \f@size pt (\cs[no-index]{small})}};
%     \node at (.24\linewidth,0)
%       {\normalsize\scalebox{\fpeval{8/\f@size}}
%         {\normalsize\f@size pt (\cs[no-index]{normalsize})}};
%     \node at (.45\linewidth,0)
%       {\large     \scalebox{\fpeval{8/\f@size}}
%         {\large     \f@size pt (\cs[no-index]{large})}};
%     \node at (.72\linewidth,0)
%       {\Large      \scalebox{\fpeval{8/\f@size}}
%         {\Large      \f@size pt (\cs[no-index]{Large})}};
%     \makeatother
%   \end{tikzpicture}
% \end{center}
% \noindent
% Users can specific the color of outline and fill,
% specific the fill-in pattern,
% and specific the scale and slant of inputted characters.
% Just like the keys in Ti\textit k\/Z.
% \iffalse
%<*example>
% \fi
\begin{example}
  \chartopath[draw = none, fill = blue]{lmm}\0
\end{example}
% \iffalse
%</example>
% \fi
% \iffalse
%<*example>
% \fi
\begin{example}
  \chartopath[pattern = north west lines, draw  = teal,
              pattern color = violet, scale = 1.2]{lmm}\0
\end{example}
% \iffalse
%</example>
% \fi
% \iffalse
%<*example>
% \fi
\begin{example}
  \chartopath[fill = green, xslant = .15]{lmm}\0
\end{example}
% \iffalse
%</example>
% \fi
%
% \subsection{Fading the path}
% \iffalse
%<*example>
% \fi
\begin{example}
  \chartopath[hfading = {red, green}]{lmm}\0
\end{example}
% \iffalse
%</example>
% \fi
% \iffalse
%<*example>
% \fi
\begin{example}
  \chartopath[hfading = {blue, -}]{lmm}\0
\end{example}
% \iffalse
%</example>
% \fi
% \iffalse
%<*example>
% \fi
\begin{example}
  \chartopath[hfading = {-, violet}]{lmm}\0
\end{example}
% \iffalse
%</example>
% \fi
% \iffalse
%<*example>
% \fi
\begin{example}
  \chartopath[vfading = {teal, purple}]{lmm}\0
\end{example}
% \iffalse
%</example>
% \fi
% \iffalse
%<*example>
% \fi
\begin{example}
  \chartopath[vfading = {-, orange}]{lmm}\0
\end{example}
% \iffalse
%</example>
% \fi
% \iffalse
%<*example>
% \fi
\begin{example}
  \chartopath[vfading = {violet, -}]{lmm}\0
\end{example}
% \iffalse
%</example>
% \fi
% \begin{texnote}
%   Fading will cost too much time!!!
% \end{texnote}
%
% \subsection{Using in \pkg{listings}}
%
% This package can be used within \pkg{listings} or \pkg{minted},
% then users could directly copy the source code from |.pdf| file
% without worry about including unwanted line numbers.
%
% \iffalse
%<*example>
% \fi
\let\orithelstnumber\thelstnumber
  \def\thelstnumber{^^A
    \chartopath[rescan = false, hfading = {violet, blue}]{lmm}{\orithelstnumber}^^A
  }
% \iffalse
%</example>
% \fi
% \begin{verbatim}
%   \let\orithelstnumber\thelstnumber
%   \def\thelstnumber{%
%     \chartopath[rescan = false, hfading = {violet, blue}]{lmm}{\orithelstnumber}%
%   }
% \end{verbatim}
% \iffalse
%<*example>
% \fi
\begin{example}
\begin{lstlisting}[language = {[LaTeX]TeX}]
\documentclass{article}
\begin{document}
  Hello, \LaTeX!
\end{document}
\end{lstlisting}
\end{example}
% \iffalse
%</example>
% \fi
% If the user loads Ti\textit k\/Z's "external" library,
% it is suggested to add the following before modifying the code line numbers:
% \begin{verbatim}
%   \tikzexternaldisable
% \end{verbatim}
% Otherwise, every line number would have to be cached, which is redundant.
% \subsection{Clipping string}
% Define a command, \cs[no-index]{strpathclip},
% to accepts a string instead of a single character:
% \iffalse
%<*example>
% \fi
\begin{example}
\ExplSyntaxOn
\NewDocumentCommand \strpathclip { O{} m }
  { \int_step_inline:nn { \exp_args:Ne \tl_count:n {#2} }
      { \chartoclip [ #1, offset = {(##1*1, 0pt)} ]
        {lmr} { \tl_item:nn {#2}{##1}} \kern2pt } }
\ExplSyntaxOff
\strpathclip[scale = 2, image = example-grid-100x100bp]{Hello, c2p}
\end{example}
% \iffalse
%</example>
% \fi
% \subsection{\hologo{(La)TeX} logo}
% The logos \TeX\ and \LaTeX\ can be recreated using \cs{chartoclip}:
% \iffalse
%<*example>
% \fi
\begin{example}
\def\ctp#1{\chartoclip[image = example-grid-100x100bp]{lmr}{#1}}
\protected\def\ctpTeX{\ctp T\kern-.125em \lower.54ex\hbox{\ctp E}\kern-.1em \ctp X}
\protected\def\ctpLaTeX{\ctp L\kern -.36em{\lower-.54ex
  \hbox{\scalebox{.72}{\ctp A}}}\kern -.08em\ctpTeX}
\scalebox{1.5}{\ctpTeX} \scalebox{1.5}{\ctpLaTeX}
\end{example}
% \iffalse
%</example>
% \fi
% \footnotesize
% \section{Todo List}
%
% \begin{itemize}
%   \item [\textcolor{green}{\textsf{Warn}}] Resolve the font warning:
%   Font shape \texttt{OMS/cmtt/m/n} undefined for \texttt{textbackslash}.
%   \item [\textcolor{blue}{\textsf{Function}}] Support syntax
%   "\chartopath{\usefont{T1}{cmr}{m}{sc} abc}",
%   "\chartopath{\sffamily abc}".
% \end{itemize}
%
% \end{documentation}
%
% \includepdf{char2path-demo}
%
% \begin{implementation}
%
% \section{The Source Code}
%
%    \begin{macrocode}
%<*package>
%    \end{macrocode}
%
%    \begin{macrocode}
%<@@=ctp>
%    \end{macrocode}
%
%    \begin{macrocode}
\ProvidesExplPackage {char2path} {2025-08-09} {v1.0.1}
  {A LaTeX package that converts characters into TikZ paths}
%    \end{macrocode}
% \begin{variable}{\g_@@_scale_tl}
% Define the |scale| key for this package.
%    \begin{macrocode}
\keys_define:nn { char2path }
  {
    scale   .tl_gset:N = \g_@@_scale_tl,
      scale .initial:n = { 10pt },
  }
\ProcessKeyOptions [ char2path ]
%    \end{macrocode}
% \end{variable}
%    \begin{macrocode}
\RequirePackage{tikz, etoolbox}
\patchcmd{\pgfutil@InputIfFileExists}
  { \input #1 }
  {
    \@pushfilename
    \xdef\@currname{#1}
    \input #1
    \@popfilename
  }{}{}
\usetikzlibrary{patterns, fadings, calc}
%    \end{macrocode}
% Warning Broadcast
%    \begin{macrocode}
\cs_new_protected:Npn \@@_msg_new:nn #1#2
  { \msg_new:nnn { char2path } {#1} {#2} }
\cs_new_protected:Npn \@@_msg_warning:n #1
  { \msg_warning:nn { char2path } {#1} }
\cs_new_protected:Npn \@@_msg_error:nn #1#2
  { \msg_error:nne { char2path } {#1} {#2} }
\@@_msg_new:nn { fading } { Unsupport ~ multiple ~ fading ~ directions }
\@@_msg_new:nn { kernel } { file ~ not ~ found }
\@@_msg_new:nn { shell-escape }
  { '-shell-escape' ~ is ~ required ~ to ~ use ~ \token_to_str:N \ctpgendata }
\@@_msg_new:nn { font2path-method }
  { 'font2path' ~ only ~ supports ~ methods: ~ 'font2svg' ~ and ~ 'fonttools' }
%    \end{macrocode}
% \begin{variable}
%   {\c_@@_tikz_folder_tl, \c_@@_global_scale_fp, \c_@@_scale_prop}
%   Define global variables: \cmd{\c_@@_tikz_folder_tl} for future use,
%   \cmd{\c_@@_global_scale_fp} for global scale factor, and
%   \cmd{\c_@@_scale_prop} for storing scale choices respectly.
%    \begin{macrocode}
\tl_const:Nn \c_@@_tikz_folder_tl { font_glyph }
\fp_const:Nn \c_@@_global_scale_fp { .0135 }
\prop_const_from_keyval:Nn \c_@@_scale_prop
  {
    10pt = 0.820, 11pt = 0.902, 12pt = 0.984, 13pt = 1.066,
    14pt = 1.148, 15pt = 1.230, 16pt = 1.311,
  }
%    \end{macrocode}
% \end{variable}
% \begin{macro}{\setCTPfamilyfont}
%   User's interface for loading custom font.
%    \begin{macrocode}
\DeclareDocumentCommand \setCTPfamilyfont
  { m m O{arabic, alpha-small, alpha-caps, others} }
  { \@@_load_font_data:nnn {#1} {#2} {#3} }
%    \end{macrocode}
% \end{macro}
% \begin{variable}{\l_@@_tikz_data_merge_tl}
%   To merge a font's different parts of data into a \meta{token list}.
%    \begin{macrocode}
\tl_new:N \l_@@_tikz_data_merge_tl
%    \end{macrocode}
% \end{variable}
% \begin{macro}{\@@_load_font_data:nnn}
% Load fonts' path data from database file (|*.data.tex|).
% Due to the fact that character |~| is stored in the database,
% |\char_set_catcode:nn { 126 } { 12 }| should be applied
% to ensure it's path data could be correctly loaded in |expl3| syntax.
%   \vspace*{-9pt}
%   \begin{multicols}{3}
%     \begin{arguments}
%       \item font style
%       \item font name
%       \item data files
%     \end{arguments}
%   \end{multicols}
%   \vspace*{-12pt}
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \@@_load_font_data:nnn #1#2#3
  {
    \clist_map_inline:nn {#3}
      {
        \file_get:nnNTF
          { ctp-#2-##1.data.tex } { \char_set_catcode:nn { 126 } { 12 } }
          \l_@@_tikz_data_single_tl
          {
            \tl_gput_right:NV \l_@@_tikz_data_merge_tl
              \l_@@_tikz_data_single_tl
          } { \@@_msg_error:nn { kernel } { ctp-#2-##1.data.tex } }
      }
    \exp_args:NnV \prop_const_from_keyval:cn
      { c_@@_tikz_#2_data_prop } { \l_@@_tikz_data_merge_tl }
    \tl_set:cn { l_@@_font_#2_type_tl } {#1}
  }
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\@@_protected_char:nn}
%   To create a macro so that it couldn't be expanded.
%    \begin{macrocode}
\cs_new:Npn \@@_protected_char:nn #1#2
  { \cs_new_protected:cpn {#1} { \exp_not:n {#2} } }
\@@_protected_char:nn { ctpbackslash } { \textbackslash }
%    \end{macrocode}
% \end{macro}
% Load font's data for |lmr|, |lms| and |lmm|, including
% arabic (Unicode: 0030 -- 0039),
% alpha-small (Unicode: 0061-007A),
% alpha-caps (Unicode: 0041 -- 005A),
% and other symbols (anything left in Unicode: 0021 -- 007E).
%    \begin{macrocode}
\setCTPfamilyfont { serif } { lmr } [ arabic, alpha-small, alpha-caps, others ]
\setCTPfamilyfont { sans  } { lms } [ arabic, alpha-small, alpha-caps, others ]
\setCTPfamilyfont { mono  } { lmm } [ arabic, alpha-small, alpha-caps, others ]
%    \end{macrocode}
% \begin{variable}
%   {
%     \l_@@_font_tl,        \l_@@_rescan_bool,
%     \l_@@_draw_tl,        \l_@@_outline_tl,
%     \l_@@_hfading_clist,  \l_@@_vfading_clist,
%     \l_@@_fill_tl,        \l_@@_scale_fp
%   }
%   Key--value definitions for the \cs{chartopath} command.
%    \begin{macrocode}
\clist_new:N \l_@@_hfading_color_left_clist
\clist_new:N \l_@@_hfading_color_right_clist
\keys_define:nn { char2path / chartopath }
  {
    rescan    .bool_set:N   = \l_@@_rescan_bool,
      rescan  .initial:n    = { true },
    mono      .dim_set:N    = \l_@@_mono_dim,
      mono    .initial:n    = { 0pt },
    draw      .tl_set:N     = \l_@@_draw_tl,
      draw    .initial:n    = { none },
    fill      .tl_set:N     = \l_@@_fill_tl,
    outline   .dim_set:N    = \l_@@_outline_tl,
      outline .initial:n    = { 0pt },
    hfading   .clist_set:N  = \l_@@_hfading_clist,
    vfading   .clist_set:N  = \l_@@_vfading_clist,
    scale     .fp_set:N     = \l_@@_scale_fp,
      scale   .initial:n    = { 1 },
    unknown   .code:n       = \@@_parse_unknown_option:n {#1}
  }
%    \end{macrocode}
% \end{variable}
% \begin{variable}{\l_@@_options_clist}
%   To store unknown key--values.
%    \begin{macrocode}
\clist_new:N \l_@@_options_clist
%    \end{macrocode}
% \end{variable}
% \begin{macro}{\@@_parse_unknown_option:n}
%   Parsing unknown key--values and pass them into Ti\textit k\/Z.
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \@@_parse_unknown_option:n #1
  {
    \tl_if_empty:nTF {#1}
      { \clist_put_right:NV \l_@@_options_clist \l_keys_key_str }
      {
        \exp_args:NNx \clist_gput_right:Nn \l_@@_options_clist
          { \l_keys_key_str = \exp_not:n {#1} }
      }
  }
%    \end{macrocode}
% \end{macro}
% \begin{variable}{\l_@@_tmpa_tl, \l_@@_hfading_keys_clist}
%   Temporary \meta{token list} for storing proceed inputted string,
%   and a \meta{comma list} for storing the color keys of |hfading|.
%    \begin{macrocode}
\tl_new:N \l_@@_tmpa_tl
\clist_new:N \l_@@_hfading_keys_clist
%    \end{macrocode}
% \end{variable}
% \begin{macro}{\chartopath}
%   The main command for this package.
%    \begin{macrocode}
\NewDocumentCommand \chartopath { O{} m m }
  {
    \group_begin:
    \keys_set:nn { char2path / chartopath } {#1}
%    \end{macrocode}
%   If the optional argument is empty, then apply the rule:
%   ``only print the outline of the inputted string''.
%    \begin{macrocode}
    \IfBlankT {#1} { \tl_set:Nn \l_@@_draw_tl { black } }
%    \end{macrocode}
%   Config the |rescan| boolean: set the catcode of
%   |$| (U+0024), |&| (U+0026), |^| (U+005E), |_| (U+005F) and |~| (U+007E).
%   to 12 (other).
%    \begin{macrocode}
    \bool_if:NTF \l_@@_rescan_bool
      {
        \tl_set_rescan:Nnn \l_@@_tmpa_tl
          {
            \char_set_catcode:nn { \int_from_hex:n { 24 } } { 12 }
            \char_set_catcode:nn { \int_from_hex:n { 26 } } { 12 }
            \char_set_catcode:nn { \int_from_hex:n { 5e } } { 12 }
            \char_set_catcode:nn { \int_from_hex:n { 5f } } { 12 }
            \char_set_catcode:nn { \int_from_hex:n { 7e } } { 12 }
          } {#3}
      } { \tl_set:Nn \l_@@_tmpa_tl {#3} }
%    \end{macrocode}
%   Warning information for fading: if both the |hfading|
%   and the |vfading| key is valued, then a warning is returned.
%    \begin{macrocode}
    \bool_lazy_and:nnT
      { !\clist_if_empty_p:N \l_@@_hfading_clist }
      { !\clist_if_empty_p:N \l_@@_vfading_clist }
      { \@@_msg_warning:n { fading } }
%    \end{macrocode}
%   Boolean judgment: if |hfading| and |vfading| are both empty at the same
%   time, or |hfading| and |vfading| are not assigned at the same time
%    \begin{macrocode}
    \bool_lazy_or:nnTF
      {
        \bool_lazy_and_p:nn { \clist_if_empty_p:N \l_@@_hfading_clist }
                            { \clist_if_empty_p:N \l_@@_vfading_clist }
      }
      {
        \bool_lazy_and_p:nn { !\clist_if_empty_p:N \l_@@_hfading_clist }
                            { !\clist_if_empty_p:N \l_@@_vfading_clist }
      }
%    \end{macrocode}
%   If the situation is true, then use the basic usage for converting.
%    \begin{macrocode}
      {
        \exp_args:Nno \@@_aux:nnnnn
          {
            draw        = \l_@@_draw_tl,  line~width  = \l_@@_outline_tl,
            \tl_if_blank:VF \l_@@_fill_tl { fill      = \l_@@_fill_tl, },
            \clist_use:Nn \l_@@_options_clist { , }
          } { \l_@@_tmpa_tl } {#2} { \l_@@_scale_fp } { \l_@@_mono_dim }
      }
%    \end{macrocode}
%   If the situation is false, then handle the vertical or horizontally
%   fading due to user's input.
%    \begin{macrocode}
      {
%    \end{macrocode}
%   Vertically fading branch.
%    \begin{macrocode}
        \clist_if_empty:NF \l_@@_vfading_clist
          {
%    \end{macrocode}
%   Split the color list into two \meta{token list}s.
%    \begin{macrocode}
            \@@_fading_parse_aux:NNN \l_@@_vfading_clist
              \l_@@_color_i_tl \l_@@_color_ii_tl
%    \end{macrocode}
%   For single color: set the other color to |transparent!0|.
%    \begin{macrocode}
            \str_case_e:nn { - }
              {
                { \l_@@_color_i_tl }
                { \tl_set:Nn \l_@@_color_i_tl { transparent!0 } }
                { \l_@@_color_ii_tl }
                { \tl_set:Nn \l_@@_color_ii_tl { transparent!0 } }
              }
%    \end{macrocode}
%   Set the |top color| and |bottom color| accordingly.
%    \begin{macrocode}
            \@@_aux:nnnnn
              {
                top~color  = \l_@@_color_i_tl, bottom~color = \l_@@_color_ii_tl,
                line~width = \l_@@_outline_tl, draw = \l_@@_draw_tl,
                \clist_use:Nn \l_@@_options_clist { , }
              } { \l_@@_tmpa_tl } {#2} { \l_@@_scale_fp } { \l_@@_mono_dim }
          }
%    \end{macrocode}
%   Horizontally fading branch.
%    \begin{macrocode}
        \clist_if_empty:NF \l_@@_hfading_clist
          {
%    \end{macrocode}
%   Split the color list into two \meta{token list}s.
%    \begin{macrocode}
            \@@_fading_parse_aux:NNN \l_@@_hfading_clist
              \l_@@_color_i_tl \l_@@_color_ii_tl
%    \end{macrocode}
%   Generate the color percentage list according to the number of
%   characters in the input stream.
%    \begin{macrocode}
            \exp_args:Ne \@@_fading_color_aux:nNN { \l_@@_tmpa_tl }
              \l_@@_hfading_color_left_clist
              \l_@@_hfading_color_right_clist
%    \end{macrocode}
%   Set the |left color| and |right color|
%   to every character with corresponding percentage.
%    \begin{macrocode}
            \int_step_inline:nn { \exp_args:Ne \tl_count:n { \l_@@_tmpa_tl } }
              {
                \tl_set:Nn \l_@@_hfading_color_tmpa_tl
                  { \clist_item:Nn \l_@@_hfading_color_left_clist {##1} }
                \tl_set:Nn \l_@@_hfading_color_tmpb_tl
                  { \clist_item:Nn \l_@@_hfading_color_right_clist {##1} }
                \str_case_e:nnF { - }
                  {
%    \end{macrocode}
%   Single color branch (left fading).
%    \begin{macrocode}
                    { \l_@@_color_i_tl }
                    {
                      \clist_set:Nn \l_@@_hfading_keys_clist
                        {
                          left~color  = \l_@@_color_ii_tl!
                            \fp_eval:n { 100 - \l_@@_hfading_color_tmpa_tl },
                          right~color = \l_@@_color_ii_tl!
                            \fp_eval:n { 100 - \l_@@_hfading_color_tmpb_tl }
                        }
                    }
%    \end{macrocode}
%   Single color branch (right fading).
%    \begin{macrocode}
                    { \l_@@_color_ii_tl }
                    {
                      \clist_set:Nn \l_@@_hfading_keys_clist
                        {
                          left~color  = \l_@@_color_i_tl!
                          \l_@@_hfading_color_tmpa_tl,
                          right~color = \l_@@_color_i_tl!
                            \l_@@_hfading_color_tmpb_tl
                        }
                    }
                  }
%    \end{macrocode}
%   Double color branch.
%    \begin{macrocode}
                  {
                    \clist_set:Nn \l_@@_hfading_keys_clist
                      {
                        left~color  = \l_@@_color_i_tl!
                          \l_@@_hfading_color_tmpa_tl!\l_@@_color_ii_tl,
                        right~color = \l_@@_color_ii_tl!
                          \fp_eval:n { 100 - \l_@@_hfading_color_tmpb_tl }!
                          \l_@@_color_i_tl
                      }
                  }
%    \end{macrocode}
%   Convert the character with color keys stored in the corresponding branch.
%    \begin{macrocode}
                \exp_args:Nne \@@_aux:nnnnn
                  {
                    draw        = \l_@@_draw_tl,
                    line~width  = \l_@@_outline_tl,
                    \clist_use:Nn \l_@@_hfading_keys_clist { , },
                    \clist_use:Nn \l_@@_options_clist { , }
                  } { \exp_args:Ne \tl_item:nn { \l_@@_tmpa_tl } {##1} }
                  {#2} { \l_@@_scale_fp } { \l_@@_mono_dim }
              }
          }
      }
%    \end{macrocode}
%   Make the keys' values only valid within the command.
%    \begin{macrocode}
    \group_end:
%    \end{macrocode}
%   Clean the unknown key--values' list.
%    \begin{macrocode}
    \clist_gclear:N \l_@@_options_clist
  }
%    \end{macrocode}
% \end{macro}
% \begin{variable}{\l_@@_mono_width_dim, \l_@@_mono_sep_dim, \l_@@_glyph_box}
%   Dimension variables for store the width and sep of the mono font,
%   and box for calculating the depths of inputted characters.
%    \begin{macrocode}
\dim_new:N \l_@@_mono_width_dim
\dim_new:N \l_@@_mono_sep_dim
\box_new:N \l_@@_glyph_box
%    \end{macrocode}
% \end{variable}
% \DescribeMacro{\str_case:vn}
%   Generate a |v-|type from \cmd{\str_case:nn} for later usage.
%    \begin{macrocode}
\prg_generate_conditional_variant:Nnn \str_case:nn { v } { F }
%    \end{macrocode}
% \begin{macro}{\@@_aux:nnnnn}
%   Define the auxiliary command of \cs{chartopath}: set the depth of
%   every font's style (|roman|, |sans|, and |mono|),
%   and then pass them to \cmd{\@@_draw:nnnnn} to process.
%   \vspace*{-9pt}
%   \begin{multicols}{4}
%     \begin{arguments}
%       \item path options
%       \item string
%       \item font style
%       \item scale factor
%     \end{arguments}
%   \end{multicols}
%   \vspace*{-12pt}
%    \begin{macrocode}
\cs_new_protected:Npn \@@_aux:nnnnn #1#2#3#4#5
  {
    \exp_args:Ne \tl_map_inline:nn {#2}
      {
        \str_case:vnF { l_@@_font_#3_type_tl }
          {
            { serif }
            {
              \hbox_set:Nn \l_@@_glyph_box { \rmfamily ##1 }
              \dim_set:Nn \l_@@_mono_width_dim { 0pt }
              \dim_set:Nn \l_@@_mono_sep_dim { .52pt }
            }
            { sans }
            {
              \hbox_set:Nn \l_@@_glyph_box { \sffamily ##1 }
              \dim_set:Nn \l_@@_mono_width_dim { 0pt }
              \dim_set:Nn \l_@@_mono_sep_dim { .52pt }
            }
            { mono }
            {
              \hbox_set:Nn \l_@@_glyph_box { \ttfamily ##1 }
              \dim_set:Nn \l_@@_mono_width_dim { 5.124975pt }
              \dim_set:Nn \l_@@_mono_sep_dim { 0pt }
            }
          } { \hbox_set:Nn \l_@@_glyph_box {##1} }
        \dim_compare:nNnF {#5} = { 0pt }
          { \dim_set:Nn \l_@@_mono_width_dim {#5} }
        \@@_draw:eennn
          {#1} { \@@_data:nn {#3} {##1} } {#4}
          { \l_@@_mono_width_dim } { \l_@@_mono_sep_dim }
      }
  }
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\@@_draw:nnnnn}
%   Auxiliary command for converting character to path:
%   conducted with |\tikz|^^A
%   \NB{TODO}{Avoid nesting \tikz command;
%             use the character's natural dimensions instead}.
%   \vspace*{-9pt}
%   \begin{multicols}{3}
%     \begin{arguments}
%       \item path options
%       \item \textsc{pgf} coordinates
%       \item scale factor
%       \item monospace width
%       \item glue
%     \end{arguments}
%   \end{multicols}
%   \vspace*{-12pt}
%    \begin{macrocode}
\cs_new_protected:Npn \@@_draw:nnnnn #1#2#3#4#5
  {
    \tikz [ baseline = -.05pt ] \node
      [ anchor = base, inner~sep = #5 * \f@size/10,
        minimum~width = #4 * \f@size/10 ]
      { \tikz [ scale = \prop_item:Ne \c_@@_scale_prop { \g_@@_scale_tl } *
                        \fp_eval:n { \f@size/8.4 * \c_@@_global_scale_fp * #3 }
              ] \path [#1] #2; };
  }
\cs_generate_variant:Nn \@@_draw:nnnnn { eennn }
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\@@_data:nn}
%   Auxiliary command for mapping character to the corresponding data.
%    \begin{macrocode}
\cs_new:Npn \@@_data:nn #1#2
  {
    \prop_if_in:cnTF { c_@@_tikz_#1_data_prop } {#2}
      { \prop_item:cn { c_@@_tikz_#1_data_prop } {#2} }
      { node [ draw, rounded~corners = .5pt, inner~xsep = -.06pt ] {?} }
    % \file_if_exist_input:n { \c_@@_tikz_folder_tl/#2.pgf.coor }
  }
\cs_generate_variant:Nn \@@_data:nn { ne, ee }
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\@@_fading_parse_aux:NNN}
%   Parsing fading color list.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_fading_parse_aux:NNN #1#2#3
  {
    \group_begin: \exp_args:NNNe \group_end:
      \tl_set:Nn #2 { \clist_item:Nn #1 { 1 } }
    \group_begin: \exp_args:NNNe \group_end:
      \tl_set:Nn #3 { \clist_item:Nn #1 { 2 } }
  }
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\@@_fading_color_aux:nNN}
%   Generate color percentage clist due to the number ofinputted characters.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_fading_color_aux:nNN #1#2#3
  {
    \int_step_inline:nn { \tl_count:n {#1} }
      {
        \clist_put_right:Ne #2
          {
            \fp_eval:n
              { 100 - (##1 - 1) * 100 / \tl_count:n {#1} }
          }
        \clist_put_right:Ne #3
          { \fp_eval:n { 100 - ##1 * 100 / \tl_count:n {#1} } }
      }
  }

%    \end{macrocode}
% \end{macro}
% \begin{variable}
%   {
%     \l_@@_clip_font_tl,   \l_@@_clip_image_tl,
%     \l_@@_clip_scale_fp,  \l_@@_clip_anchor_tl,
%     \l_@@_clip_offset_tl, \l_@@_clip_height_tl
%   }
%   Key--value definitions for the \cs{chartoclip} command^^A
%   \NB{TODO}{Change ``height'' to the height of char}.
%    \begin{macrocode}
\keys_define:nn { char2path / chartoclip }
  {
    image     .tl_set:N  = \l_@@_clip_image_tl,
      image   .initial:n = { example-image },
    scale     .fp_set:N  = \l_@@_clip_scale_fp,
      scale   .initial:n = { 1 },
    anchor    .tl_set:N  = \l_@@_clip_anchor_tl,
      anchor  .initial:n = { center },
    offset    .tl_set:N  = \l_@@_clip_offset_tl,
      offset  .initial:n = { (0pt, 0pt) },
    height    .dim_set:N = \l_@@_clip_height_tl,
      height  .initial:n = { 3cm },
  }
%    \end{macrocode}
% \end{variable}
% \begin{macro}{\chartoclip}
%   Command for the converted path clipping an specific image.
%    \begin{macrocode}
\NewDocumentCommand \chartoclip { O{} m m }
  {
    \group_begin:
    \keys_set:nn { char2path / chartoclip }{#1}
    \exp_args:Nee \@@_image_clip_aux:nnnnnn
      { \prop_item:ce { c_@@_tikz_#2_data_prop } { #3 } }
      { \l_@@_clip_offset_tl  } { \l_@@_clip_image_tl   }
      { \l_@@_clip_height_tl  } { \l_@@_clip_scale_fp   }
      { \l_@@_clip_anchor_tl  }
    \group_end:
  }
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\@@_image_clip_aux:nnnnnn}
%   The auxiliary command of \cs{chartoclip}:
%   \vspace*{-9pt}
%   \begin{multicols}{3}
%     \begin{arguments}
%       \item path data
%       \item anchor offset
%       \item image
%       \item image height
%       \item scale
%       \item anchor
%     \end{arguments}
%   \end{multicols}
%   \vspace*{-12pt}
%    \begin{macrocode}
\cs_new:Npn \@@_image_clip_aux:nnnnnn #1#2#3#4#5#6
  {
    \tikz [ scale = \fp_eval:n { \f@size/8.4 * \c_@@_global_scale_fp * #5 },
            baseline = -.05pt ]
      \path [ path~picture = {
              \node at ($(path~picture~bounding~box.#6) + #2$)
                { \includegraphics [ height = #4 ] {#3} };
          } ] #1;
  }
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\ctpdata}
% Command for printing \pkg{char2path}'s data.
%    \begin{macrocode}
\newcommand \ctpdata [2] { \@@_data:nn {#1} {#2} }
%    \end{macrocode}
% \end{macro}
% \begin{variable}
%   {
%     \l_@@_cli_method_tl,    \l_@@_cli_string_tl,
%     \l_@@_cli_fontdir_tl,   \l_@@_cli_datadir_tl,
%     \l_@@_cli_font_tl,      \l_@@_cli_alias_tl,
%     \l_@@_cli_gensvg_bool,  \l_@@_cli_extsvg_bool,
%     \l_@@_cli_gentkz_bool,  \l_@@_cli_toml_tl
%   }
%   Key--value definitions for the \cs{ctpgendata} command^^A
%   \NB{TODO}{Support toml spec in cli.}.
%    \begin{macrocode}
\keys_define:nn { chartopath / cli }
  {
    method  .tl_set:N  = \l_@@_cli_method_tl,
    method  .initial:n = { font2svg },
    string  .tl_set:N  = \l_@@_cli_string_tl,
    fontdir .tl_set:N  = \l_@@_cli_fontdir_tl,
    fontdir .initial:n = { . },
    datadir .tl_set:N  = \l_@@_cli_datadir_tl,
    datadir .initial:n = { ctp_data },
    font    .tl_set:N  = \l_@@_cli_font_tl,
    % ^^A font    .value_required:n = true,
    alias   .tl_set:N  = \l_@@_cli_alias_tl,
    % ^^A alias   .value_required:n = true, 
    gensvg  .bool_set:N = \l_@@_cli_gensvg_bool,
    gensvg  .initial:n  = { true },
    gensvg  .default:n  = { true },
    extsvg  .bool_set:N = \l_@@_cli_extsvg_bool,
    extsvg  .initial:n  = { true },
    extsvg  .default:n  = { true },
    gentkz  .bool_set:N = \l_@@_cli_gentkz_bool,
    gentkz  .initial:n  = { true },
    gentkz  .default:n  = { true },
    toml    .tl_set:N   = \l_@@_cli_toml_tl,
    toml    .initial:n  = { ctpcfg.toml }
  }
%    \end{macrocode}
% \end{variable}
% \begin{macro}{\ctpgendata}
%   Command for generating path data from font file\NB{TODO}^^A
%   {Change syntax to '#1(O): other keys; #2(m): method; #3(m): font/string'}.
%    \begin{macrocode}
\NewDocumentCommand \ctpgendata { m } { \@@_cli:n {#1} }
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\@@_cli:n}
%   Auxiliary command for generating font path data.
%    \begin{macrocode}
\cs_new:Npn \@@_cli:n #1
  {
    \group_begin:
    \keys_set:nn { chartopath / cli } { #1 }
    \str_case:enF { \l_@@_cli_method_tl }
      {
        { font2svg }
          {
            \@@_shell_escape:ne { \c_true_bool }
              {
                -m~font2svg \space
                \@@_cli_args_add:nn { -g } { \the\l_@@_cli_gensvg_bool }
                \@@_cli_args_add:nn { -e } { \the\l_@@_cli_extsvg_bool }
                \@@_cli_args_add:nn { -c } { \the\l_@@_cli_gentkz_bool }
                \@@_cli_default_args:
              }
          }
        { fonttools }
          {
            \@@_shell_escape:ne { \c_false_bool }
              {
                -m~fonttools \space
                -s~\l_@@_cli_string_tl \space
                \@@_cli_default_args:
              }
          }
      } { \@@_msg_error:nn { font2path-method } { ... } }
    \group_end:
  }
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\@@_cmd_name:}
%   Executable program name (Equals to "python font2path.py").
%    \begin{macrocode}
\cs_new:Nn \@@_cmd_name: { ./font2path~ }
%    \end{macrocode}
% \end{macro}
% \begin{variable}{\g_@@_cli_result_tl}
%   For testing: Print the result of "-shell -escape".
%    \begin{macrocode}
\tl_new:N \g_@@_cli_result_tl
%    \end{macrocode}
% \end{variable}
% \begin{macro}{\@@_shell_escape:nn}
%   Command line needs to be executed via "-shell -escape".
%   \begin{arguments}
%     \item bool (true: "shell_now", false: "shell_get").
%     \item font2path args.
%   \end{arguments}
%    \begin{macrocode}
\cs_new:Npn \@@_shell_escape:nn #1#2 
  {
    \sys_if_shell_unrestricted:TF
      {
%    \end{macrocode}
%  \NB{TODO}{Add cache mechanism here.}
%    \begin{macrocode}
        \bool_if:nTF { #1 }
          { \sys_shell_now:e { \@@_cmd_name: #2 } }
          {
            \exp_args:Ne \sys_get_shell:nnN 
              { \@@_cmd_name: #2 } { \cctab_select:N \c_initex_cctab }
              \l_tmpa_tl
%    \end{macrocode}
%  Testing via \cmd{\q_no_value}.
%    \begin{macrocode}
            \tl_gset:Ne \g_@@_cli_result_tl { \l_tmpa_tl }
          }
      } { \@@_msg_error:nn { shell-escape } { ... } }
  }
\cs_generate_variant:Nn \@@_shell_escape:nn { ne, no }
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\@@_cli_args_add:nn}
% \begin{macro}{\@@_cli_default_args:}
%   Arguments configuration for the "font2path" executable program.
%    \begin{macrocode}
\cs_new:Npn \@@_cli_args_add:nn #1#2 { \tl_if_empty:eF { #2 } { #1~#2 \space } }
\cs_new:Npn \@@_cli_default_args:
  {
    \@@_cli_args_add:nn { -q } { true }
    \@@_cli_args_add:nn { -p } { \l_@@_cli_fontdir_tl }
    \@@_cli_args_add:nn { -d } { \l_@@_cli_datadir_tl }
    \@@_cli_args_add:nn { -f } { \l_@@_cli_font_tl }
    \@@_cli_args_add:nn { -a } { \l_@@_cli_alias_tl }
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%    \begin{macrocode}
\file_input_stop:
%    \end{macrocode}
%    \begin{macrocode}
%</package>
%    \end{macrocode}
% \end{implementation}
% \PrintIndex